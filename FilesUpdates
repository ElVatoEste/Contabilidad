#include <iostream>
#include <fstream>
#include <string>
#include <list>
#include <conio.h>
#include <chrono>
#include <ctime>
#include <cstdio>
#include <cstring>
#include <windows.h>
#include <iomanip>
#include <sstream>
#include <iostream>
#include <map>

using namespace std;

struct Node {
public:
    long double value;
    string name;
    string date;
    Node* next;
};

string llave;
long double value;
long double total_v;
long double inv_i;
long double mercad;
long double val_temp;
int trys = 0;

char date[11];

string datos[] = {
    "Ventas",
    "Dev_Ventas",
    "Reb_Ventas",
    "Desc_Ventas",
    "Ventas_Netas",
    "Inv_Ini",
    "Compras",
    "Gast_Comp",
    "Comp_Totales",
    "Dev_Comp",
    "Reb_Comp",
    "Desc_Comp",
    "Comp_Netas",
    "Mer_Disponible",
    "Inv_Final",
    "Costos_Ventas",
    "Util_Bruta",
    "Gast_Admin",
    "Gast_Ventas",
    "Gast_Financieros",
    "Util_Operacional",
    "Otr_Gastos",
    "Otr_Ingresos",
    "Util_Impuestos",
    "IR_30%",
    "Util_Per_Ejer"
};

map<int, string> map2 = {{0, "Ventas"},
                     {1, "Devolucion de ventas"},
                     {2, "Rebaja sobre ventas"},
                     {3, "Descuentos sobre ventas"},
                     {4, "Ventas Netas"},
                     {5, "Inventario inicial"},
                     {6, "Compras"},
                     {7, "Gastos sobre compras"},
                     {8, "Compras totales"},
                     {9, "Devolucion sobre compras"},
                     {10, "Rebaja sobre compras"},
                     {11, "Descuentos sobre compras"},
                     {12, "Compras netas"},
                     {13, "Mercaderia Disponible"},
                     {14, "Inventario final"},
                     {15, "Costos de ventas"},
                     {16, "Utilidad Bruta"},
                     {17, "Gastos administrativos"},
                     {18, "Gastos de ventas"},
                     {19, "Gastos financieros"},
                     {20, "Utilidad Operacional"},
                     {21, "Otros gastos"},
                     {22, "Otros ingresos"},
                     {23, "Utilidad ante impuestos"},
                     {24, "IR 30%"},
                     {25, "Utilidad/Perdida del ejercicio"}};


template <typename Key, typename Value>
Value GetValueForKey(const map<Key, Value>& map, const Key& key) {
    auto it = map.find(key);
    if (it != map.end()) {
        return it->second;
    }
}

template <typename Key, typename Value>
Value gecho(const map<Key, Value>& map, const Key& key) {
    auto it = map.find(key);
    if (it != map.end()) {
        return it->second;
    }
}

class LinkedList {
public:
    LinkedList() : head(nullptr) {}

    void add(const string& name, double value) {
        Node* newNode = new Node();
        newNode->name = name;
        newNode->value = value;
        newNode->next = head;
        head = newNode;
    }

	/*
    void printList() {
    
    ifstream file("FileName");
    string line;
    while (getline(file, line)) {
        string username = line.substr(0, line.find(","));
        string password = line.substr(line.find(",") + 1);
        User* user = new User{username, password};
        users.push_back(user);
    }
    file.close();
    return users;
	}
	
        Node* currentNode = head;
        while (currentNode != nullptr) { 
            cout << currentNode->name << " = C$ " << currentNode->value << endl;
            currentNode = currentNode->next;
        }
    }
    */
    
	void printReverse(Node* currentNode) {
    if (currentNode == nullptr) {
        return;
    }
    printReverse(currentNode->next);
    
    Sleep(100);
    cout << "\t";
    
	string makk = currentNode->name;
	int mak;
	for (int i=0; i<26; i++){
		
		if (datos[i]==makk){
			mak = i;
			break;
		}
	}
	
	llave = GetValueForKey(map2, mak);
	
	cout << left << setw(30) << llave;
    
    ostringstream stream;
    
    stream << fixed << setprecision(2) << currentNode->value;
    string str = stream.str();
    int pos = str.find(".");
    while (pos > 3) {
        pos -= 3;
        str.insert(pos, ",");
    }
    cout << right << setw(10) << str << setfill(' ') << endl;
}

	void printReverseList() {
    printReverse(head);
	}

    void saveList(const string& fileName) {
        ofstream outFile(fileName, ios_base::app);

        Node* currentNode = head;
        while (currentNode != nullptr) {
            outFile << currentNode->name << "," << currentNode->value << endl;
            currentNode = currentNode->next;
        }

        outFile.close();
    }

private:
    Node* head;
};

struct User {
    string username; 
    string password;
};

void saveUsers(list<User*> users) {
    ofstream file("user.txt");
    for (auto user : users) {
        file << user->username << "," << user->password << endl;
    }
    file.close();
}

list<User*> loadUsers() {
    list<User*> users;
    ifstream file("user.txt");
    string line;
    while (getline(file, line)) {
        string username = line.substr(0, line.find(","));
        string password = line.substr(line.find(",") + 1);
        User* user = new User{username, password};
        users.push_back(user);
    }
    file.close();
    return users;
}

bool validateUser(list<User*> users, string username, string password) {
    for (auto user : users) {
        if (user->username == username && user->password == password) {
            return true;
        }
    }
    return false;
}

void createUser(list<User*> &users) {
    string username, password;
    cout << "\n\tIngrese el nombre de usuario: ";
    cin >> username;
    cout << "\n\tIngrese la clave: ";
    password = "";
    char c;
    while ((c = _getch()) != 13) { // 13 es el código ASCII de la tecla Enter
        if (c == '\b') { // \b es el código ASCII de la tecla Retroceso
            if (!password.empty()) {
                password.pop_back();
                cout << "\b \b"; // Borra el último caracter en la consola
            }
        } else {
            password += c;
            cout << "*";
        }
    }
    User* newUser = new User{username, password};
    users.push_back(newUser);
    saveUsers(users);
    cout << endl << "\n\tUsuario creado exitosamente" << endl;
    Sleep(1500);
}

int main() {
	
	time_t time_now = time(nullptr);
	strftime(date, 4, "%b", localtime(&time_now));

	string fileName = "estadoR_" + string(date) + ".txt";
	

	inicia_Menu:
	system("cls");
	
    list<User*> users = loadUsers();
    string username, password;
    cout << "\n\tIngrese usuario: ";
    cin >> username;
    cout << "\n\tIngrese la clave: ";
    password = "";
    char c;
    while ((c = _getch()) != 13) {
        if (c == '\b') {
            if (!password.empty()) {
                password.pop_back();
                cout << "\b \b";
            }
        } else {
            password += c;
            cout << "*";
        }
    }
    cout << endl;
    if (username == "Admin" && password == "IvanHacker00") {
        cout << "\n\tInicio de sesion exitoso como administrador!" << endl;
        Sleep(500);
        
        createUser(users);
        
        goto inicia_Menu;
    } else if (username == "Show" && password == "123"){
    	return 0;
    	
	} else if (validateUser(users, username, password)) {
        cout << "\n\tInicio de sesion exitoso!" << endl;
        
        	Sleep(1500);
        	system("cls");
        
		    LinkedList list;
		
		    // Obtener la fecha actual y darle formato
		     
		    // Pedir los datos al usuario y agregarlos a la lista
		    for (int i = 0 ; i < 4; i++) {
		    	
		    	
		    	llave = GetValueForKey(map2, i);
		        cout << "\n\tIngrese el valor de " << llave << " C$ "; 
		        
		        cin >> value;
		        
		        if (i == 0){
					total_v = value;
				}
				else{
					total_v = total_v - value;
				}
		        
		        list.add(datos[i], value);
		        
		    }
			
			list.add(datos[4] , total_v);
			
			llave = GetValueForKey(map2, 5);
		    cout << "\n\tIngrese el valor de " << llave << " C$ "; 
		    
		    cin >> value;
		    inv_i = value;
		    list.add(datos[5], value);
			
			for (int i = 6 ; i < 8; i++) {
		    	
		        llave = GetValueForKey(map2, i);
		    	cout << "\n\tIngrese el valor de " << llave << " C$ "; 
		        cin >> value;
		        
				val_temp = val_temp + value;
		        list.add(datos[i], value);
		    }
		    
		    list.add(datos[8], val_temp);
		    
		    for (int i = 9 ; i < 12; i++) {
		    	
		        llave = GetValueForKey(map2, i);
		    	cout << "\n\tIngrese el valor de " << llave << " C$ "; 
		        cin >> value;
		        
				val_temp = val_temp - value;
		        list.add(datos[i], value);
		    }
		    
		    mercad = inv_i + val_temp ;
		    
		    list.add(datos [12], val_temp);
		    
		    list.add(datos[13] , mercad);
		    
		    llave = GetValueForKey(map2, 14);
		    cout << "\n\tIngrese el valor de " << llave << " C$ "; 
		    
		    cin >> value ;
		    list.add(datos[14], value);
		    
		    long double cost_v = mercad - value;
		    long double ult_brut = total_v - cost_v;
		    
		    list.add(datos[15], cost_v); 
		    list.add(datos[16], ult_brut);
		    
		    long double ult_op = ult_brut;
		    
		    for (int i = 17 ; i < 20 ; i++) {
		    	
		        llave = GetValueForKey(map2, i);
				cout << "\n\tIngrese el valor de " << llave << " C$ "; 
		        cin >> value;
		        
				ult_op = ult_op - value;
		        list.add(datos[i], value);
		    }
		    
		    list.add(datos[20], ult_op);
		    
		    llave = GetValueForKey(map2, 21);
		    cout << "\n\tIngrese el valor de " << llave << " C$ "; 
		    
		    cin >> value;
		    list.add(datos[21], value);
		    
			long double ult_tot = ult_op - value;
		    
		    llave = GetValueForKey(map2, 22);
		    cout << "\n\tIngrese el valor de " << llave << " C$ ";
		    
		    cin >> value;
		    list.add(datos[22], value);
		    
		    ult_tot = ult_tot + value;
		    list.add(datos[23], ult_tot);
		    
		    long double i_r = ult_tot * 0.30;
		    long double total = ult_tot - i_r;
		    
		    list.add(datos[24], i_r);
		    list.add(datos[25], total);
		    
		    
		    // Guardar la lista en un archivo y mostrarla en la consola
		    
		    list.saveList(fileName);
		    
		    cout<<"\n\n\t";
		    string frase = "Los datos han sido ingresados correctamente...";
        	Sleep(1000);
    		for (int i = 0; i < frase.size(); i++) {
		        cout << frase[i];
		        Sleep(50); // Esperar 500 milisegundos
		    	}
		    
		    Sleep(1500);
		    system("cls");
		    cout <<"\n";
			list.printReverseList();


        // Aquí va el código para el menú del programa
    } else {
        cout << "\n\tUsuario o la clave son incorrectos" << endl;
        trys = trys + 1;
        
        Sleep(1500);
        
        if (trys == 3){
        	system("cls");
        	cout << "\n\tUsted a excedido el numero de intentos\n\t";
        	string frase = "Pum pa casa";
        	Sleep(500);
    		for (int i = 0; i < frase.size(); i++) {
		        cout << frase[i];
		        Sleep(80); 
		    	}
		    cout << "\n\t";
		    exit(0);
		}
		else{
			goto inicia_Menu;
		}
        
    }
    return 0;
}
